#!/bin/bash

if [[ $# -eq 0 ]]; then
  man shed
  exit $?
fi

readonly MODULE=$1
shift

case $MODULE in
version)
  shed-version "$@"
  exit $?
  ;;
config)
  shed-config "$@"
  exit $?
  ;;
config-get)
  shed-config-get "$@"
  exit $?
  ;;
config-edit)
  shed-config-edit "$@"
  exit $?
  ;;
env)
  shed-env "$@"
  exit $?
  ;;
list)
  shed-list "$@"
  exit $?
  ;;
list-code)
  shed-list-code "$@"
  exit $?
  ;;
value)
  shed-value "$@"
  exit $?
  ;;
value-key-list)
  shed-value-key-list "$@"
  exit $?
  ;;
values)
  shed-values "$@"
  exit $?
  ;;
contexts)
  shed-contexts "$@"
  exit $?
  ;;
kubectl)
  shed-kubectl "$@"
  exit $?
  ;;
kubectl-exec-bash)
  shed-kubectl-exec-bash "$@"
  exit $?
  ;;
kubectl-exec-sh)
  shed-kubectl-exec-sh "$@"
  exit $?
  ;;
kubectl-scale)
  shed-kubectl-scale "$@"
  exit $?
  ;;
kubectl-logs-follow)
  shed-kubectl-logs-follow "$@"
  exit $?
  ;;
kubectl-logs-previous)
  shed-kubectl-logs-previous "$@"
  exit $?
  ;;
kubectl-secret-decode)
  shed-kubectl-secret-decode "$@"
  exit $?
  ;;
kubectl-resources)
  shed-kubectl-resources "$@"
  exit $?
  ;;
kubectl-apply)
  shed-kubectl-apply "$@"
  exit $?
  ;;
kubectl-delete)
  shed-kubectl-delete "$@"
  exit $?
  ;;
helm)
  shed-helm "$@"
  exit $?
  ;;
istioctl)
  shed-istioctl "$@"
  exit $?
  ;;
help)
  man shed
  exit $?
  ;;
esac

echo "Unsupported module: $MODULE" >&2
exit 3
